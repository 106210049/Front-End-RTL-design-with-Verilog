#@ # 
#@ # Running fm_shell Version W-2024.09-SP5 for linux64 -- Apr  9, 2025
#@ # Date:   Thu Jun 26 09:53:46 2025
#@ # Run by: dsac@dsac156
#@ 

source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/admin/setup/.synopsys_fm.setup
#@ # -- Starting source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/admin/setup/.synopsys_fm.setup

#@ #
#@ # .synopsys_fm.setup: Initialization File for Formality
#@ #
#@ 
#@ 
#@ #
#@ # Enable stack trace output on fatal.  Not available for all architectures.
#@ #
#@ if { $sh_arch == "sparc" || $sh_arch == "sparcOS5" || \
#@      $sh_arch == "hp700" || $sh_arch == "hpux10" } {
#@   set_unix_variable SYNOPSYS_TRACE ""
#@ }
#@ 
#@ #
#@ # Variable settings
#@ #
#@ set sh_new_variable_message true
#@ 
#@ #
#@ # Synopsys strongly recommends that you uncomment the following command
#@ # in order to set sh_command_abbrev_mode to the value "Command-Line-Only".
#@ # Command abbreviation is intended as an interactive convenience.  Using
#@ # abbreviations in scripts can cause commands to fail in subsequent releases.
#@ # 
#@ #set sh_command_abbrev_mode "Command-Line-Only"
#@ 
#@ #
#@ # Some useful aliases
#@ #
#@ alias list_commands		help
#@ 
#@ #
#@ # The alias of q to quit is commented out.  Remove the comment 
#@ # character if you want this alias.  Some users find that having 
#@ # this particular alias causes problems when mixed with page-mode
#@ # for reports - an accidental repeated 'q' not only cancels the
#@ # output but exits the tool.
#@ #
#@ #alias q quit
#@ # -- End source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/admin/setup/.synopsys_fm.setup

source -echo -verbose LEC/lab1_lec.tcl
#@ # -- Starting source LEC/lab1_lec.tcl

#@ # =============================================
#@ # Formality Equivalence Check TCL Script: COUNTER
#@ # =============================================
#@ 
#@ file mkdir ./reports
#@ # 0. Load SVF from Design Compiler
#@ set_svf ./outputs/counter_formality.svf
#@ 
#@ # 1. Load the RTL design (container "r")
#@ read_verilog -container r -libname WORK -01 { ./rtl/counter.v }
#@ set_top r:/WORK/counter
#@ 
#@ # 2. Load the synthesized netlist (container "i")
#@ read_verilog -container i -libname WORK -01 { ./outputs/counter_synth.v }
#@ 
#@ # 3. Load the standard cell library
#@ read_db { /home/dsac/Documents/Long/Pico/common/liberty/saed14rvt_ff0p88v125c.db }
#@ 
#@ # 4. Set the top module for netlist
#@ set_top i:/WORK/counter
#@ 
#@ # 5. Match RTL vs Netlist
#@ match
#@ 
#@ # 6. Formal verification
#@ verify
#@ 
#@ # 7. Reports
#@ 
#@ #report_verification_results > ./reports/verify_report.txt
#@ report_compare_points > ./reports/compare_points.txt
#@ report_black_boxes > ./reports/black_boxes.txt
#@ report_unmatched_points > ./reports/unmatched_points.txt
#@ report_passing_points > ./reports/passing_points.txt
#@ report_failing_points > ./reports/failing_points.txt
#@ report_aborted_points > ./reports/aborted_points.txt
#@ 
#@ 
#@ # -- End source LEC/lab1_lec.tcl

gui_start
set cdf_gen_file 1541061.fm.cdf;
source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/auxx/gui/fm/.convertFmCmd2Tcl.tcl
#@ # -- Starting source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/auxx/gui/fm/.convertFmCmd2Tcl.tcl

#@ 
#@ ##--- Final output command definition file for "Formality Commands"
#@ 
#@ ## Guard
#@ if {![info exists cdf_gen_file]} {
#@   echo "Error: fm_shell cannot generate cdf file. Check if GUI version is compatible.";
#@ }
#@ set ::fmcdf    $cdf_gen_file
#@ 
#@ set ::fmgroup "Formality Commands"
#@ set ::gpFile $::fmcdf.gpfile
#@ 
#@ # Get all groups
#@ set result [help -groups > $::gpFile]
#@ set fp [open $::gpFile r]
#@ set ::gp_file_data [read $fp]
#@ close $fp
#@ 
#@ ##-! Get each command
#@ if {![llength [info procs get_command_def]]} {
#@    proc get_command_def _cmd {
#@       set cmd [string trim $_cmd]
#@       if { [string compare $cmd ""] != 0 } {
#@          if { [string compare $cmd "_version"] != 0 } {
#@             if { [string compare -length 4 $cmd "gui_"] != 0 } {
#@                #echo "Definiton: $cmd"
#@                set defn [get_defined_commands -details $cmd]
#@                set defn [regsub -all \n $defn ""]
#@                #echo defn=$defn
#@                puts  $::allCmds $defn
#@             }
#@          }
#@       }
#@    }
#@ }
#@ 
#@ ##-! Generate cmds for a group
#@ if {![llength [info procs get_command_from_gp]]} {
#@    proc get_command_from_gp _group {
#@       set group [string trim $_group]
#@       set gcmdfile $::fmcdf.$group
#@ 
#@       ##========== or use redirect $gcmdfile {help "$group"}
#@       set cresult [help "$group" > $gcmdfile]
#@ 
#@       ##==========
#@       set pfi [open $gcmdfile "r"]
#@       while {1 == 1} {
#@        set cnt [gets $pfi row]
#@        if {$cnt < 0} {break} ; ## Check if eof
#@        set word [lindex [split $row "#"] 0]  ; # find_compare_points # comments...
#@        #puts $allCmds $word
#@        # strip header
#@        set header "$group: "
#@        if { $word != $header } {
#@            get_command_def $word
#@        }
#@       }
#@       close $pfi
#@       ##==========
#@ 
#@       # Clean up
#@       file delete -force  $gcmdfile
#@    }
#@ }
#@ 
#@ #-!  Process data file
#@ #================================
#@ set ::allCmds [open $::fmcdf "w"]
#@ set gp [split $::gp_file_data "\n"]
#@ foreach group $gp {
#@      # do some line processing here
#@     if { $group == $::fmgroup } {
#@        # echo *** Generate cmd from group \"$group\"
#@        get_command_from_gp $group
#@     } else {
#@        # echo Other cmd group $group
#@     }
#@ }
#@ close $::allCmds
#@ file delete -force  $::gpFile
#@ # -- End source /home/dsac/synopsys/tools/fm/W-2024.09-SP5/auxx/gui/fm/.convertFmCmd2Tcl.tcl

exit
